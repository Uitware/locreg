{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p><code>locreg</code> makes deploying containerized applications to cloud simple and free of container registry charge. </p> <p></p> <p>locreg provides a simple way to create local container registry and cloud resources to host your app in desired cloud. Currently, supported cloud container deployment platforms include Azure Container Instances, Azure App services, and AWS Elastic Container Service (ECS).  Its core focus is to provide you with secure and free local storage for your images that can be easily used for cloud resources deployment.</p> <p>As <code>locreg</code> is a cloud-agnostic solution, you can use it with any cloud provider you want to easily provision Internet-facing container registry via tunnel.</p> <p>Check install to see how to install <code>locreg</code> and start using it. </p>"},{"location":"#whats-next","title":"What's next?","text":"<ul> <li>Use getting started guide to see how to use <code>locreg</code> to deploy your app.</li> <li>Get familiar with <code>locreg</code> using locreg CLI guide.</li> <li>Get familiar with <code>locreg</code> configuration options</li> </ul>"},{"location":"configuration/","title":"Configuration file","text":"<p><code>locreg</code> uses a configuration file to store the settings. The configuration file is a <code>.yaml</code> file with name <code>locreg.yaml</code>.  The configuration file is stored in the same folder as Dockerfile or at the root of the project.</p>"},{"location":"configuration/#configuration-file-structure","title":"Configuration file structure","text":"<p>The locreg configuration file consists of five sections as shown below.</p> <pre><code>registry:\n\nimage:\n\ntunnel:\n  provider:\n\n\ndeploy:\n  provider:\n\ntags:\n</code></pre> <p>Each of the parts corresponds to a single item that <code>locreg</code> creates except of tags.  The <code>tags</code> part is used to store the tags that are used to tag cloud resources</p>"},{"location":"configuration/#the-default-values","title":"The default values","text":"<p>Before going further to configuration, it's important to understand how default values work.  If you want to use defaults, you must specify a type of service for which you want to use defaults. Like in this example below:</p> <pre><code>deploy:\n  provider:\n    azure:\n    location: \"eastus\"\n    resourceGroup: \"LocregResourceGroup\"\n    containerInstance:\n</code></pre> <p>The <code>containerInstance:</code> in this configuration has default values for all the properties. If you want to set some particular properties to non-default values, you can do it like in the example below:</p> <pre><code>deploy:\n  provider:\n    azure:\n    location: \"eastus\"\n    resourceGroup: \"LocregResourceGroup\"\n    containerInstance:\n      name: \"Sample-Conainerinstance\"\n      restartPolicy: \"OnFailure\"\n</code></pre> <p>This way, all the values which you haven't explicitly overridden, are set to the defaults.</p>"},{"location":"configuration/#registry-configuration","title":"Registry configuration","text":"<p>The registry configuration part is used to store the settings of the local registry. The registry configuration part consists of the following items.</p> <pre><code>registry:\n  port: 5555 # Port number of the registry may be omitted\n  tag: \"2\" # Tag of the registry may be omitted\n  image: \"registry\" # Image of the registry may be omitted\n  name: \"my-registry\" # Name of the registry may be omitted\n  username: \"myUsername\" # Username of the registry may be omitted\n  password: \"myPassword\" # Password of the registry may be omitted\n</code></pre> <p>As you can see, all configuration items for registry are optional. So if you want you can only specify <code>registry:</code> in your config, and it will be launched with all the default values.</p>"},{"location":"configuration/#registry-default-values","title":"Registry default values","text":"<p>The default values for the registry configuration are predefined by the <code>locreg</code>, except of password and username that are randomly generated 32 characters long strings. Default values are as follows:</p> <pre><code>registry:\n  port: 5000\n  tag: \"2\"\n  image: \"registry\"\n  name: \"locreg-registry\"\n  password: cd322517461e36a0d08a38a6bbca66ffb774fe381555278a70ec56bb993a8ee1 #randomly generated 32 characters long string\n  username: 866a7f4c2e38bbfbb67a5c487bd43d7e5773ed176b11987afbfbd2c7114090219dd26c88 #randomly generated 32 characters long string\n</code></pre>"},{"location":"configuration/#image-configuration","title":"Image configuration","text":"<p>The image configuration part is used to store the settings of the image that is used to deploy the registry. The image configuration part consists of the following items.</p> <pre><code>image:\n  name: \"your desired name\" # Name of the image may be omitted\n  tag: \"version\" # Tag of the image may be omitted\n</code></pre>"},{"location":"configuration/#image-default-values","title":"Image default values","text":"<p>By default, the image configuration is set to the following values:</p> <pre><code>image:\n  name: \"locreg-built-image\"\n  tag: # your current git SHA or \"latest\", if git repo isn't initialized \n</code></pre>"},{"location":"configuration/#tunnel-configuration","title":"Tunnel configuration","text":"<p>Tunnel configuration part is used to store the settings of the tunnel provider. The tunnel configuration part consists of the following items.</p> <pre><code>tunnel:\n  provider: # specify the provider name\n    ngrok: # provider name\n      name: \"your ngrok container name\" # Ngrok container name may be omitted\n      image: \"ngrok/ngrok\" # Ngrok image may be omitted\n      tag: \"latest\" # Ngrok image tag may be omitted\n      port: 4040 # Ngrok port may be omitted\n      networkName: \"your network name\" # Ngrok network may be omitted\n</code></pre>"},{"location":"configuration/#tunnel-default-values","title":"Tunnel default values","text":"<p>By default, the tunnel configuration is set to the following values:</p> <pre><code>tunnel:\n  provider: \n    ngrok: \n      name: locreg-ngrok\n      image: ngrok/ngrok\n      tag: latest\n      port: 4040\n      networkName: locreg-ngrok\n</code></pre>"},{"location":"configuration/#deploy-configuration-azure","title":"Deploy configuration Azure","text":"<p>Deploy configuration part is used to store the settings of the deployment provider. The deployment configuration part consists of the following items:</p> <pre><code>deploy:\n  provider:\n    azure: # specify the provider name\n      appServicePlan: # App service plan configuration\n      appService: # App service configuration\n      # Or\n      containerInstance: # Container instance configuration\n</code></pre> <p>It's important that only one of the two services can be specified in the deployment configuration.  It's either <code>appService</code> and <code>appServicePlan</code> or <code>containerInstance</code>.</p>"},{"location":"configuration/#deployment-for-azure-app-service","title":"Deployment for Azure App Service:","text":"<pre><code>\ndeploy:\n  provider:\n    azure:\n      location: \"East US\" # Location of all resources. May be omitted\n      resourceGroup: \"myResourceGroup\" # Resource group name. May be omitted\n      appServicePlan:\n        name: \"myAppServicePlan\" # App service plan name. May be omitted\n        sku:\n          name: \"F1\" # App service plan SKU name. May be omitted\n          capacity: 1 # App service plan capacity. May be omitted\n        planProperties:\n          reserved: true # App service plan reserved, may be omitted\n      appService:\n        name: \"myAppService\" # App service name MUST be unique. May be omitted\n        siteConfig:\n          alwaysOn: true # App service always on. May be omitted\n</code></pre>"},{"location":"configuration/#app-service-default-values","title":"App Service default values","text":"<p>By default, the deployment configuration is set to the following values:</p> <pre><code>deploy:\n  provider:\n    azure:\n      location: \"eastus\"\n      resourceGroup: \"LocregResourceGroup\"\n      appServicePlan:\n        name: \"LocregAppServicePlan\"\n        sku:\n          name: \"F1\"\n          capacity: 1\n        planProperties:\n          reserved: true\n      appService:\n        name: \"locregappservice[random_suffix]\" # [random_suffix] is a randomly generated 8 characters long string\n        siteConfig:\n          alwaysOn: false\n</code></pre>"},{"location":"configuration/#deployment-for-container-instances","title":"Deployment for Container Instances:","text":"<pre><code>deploy:\n  provider:\n    azure:\n      location: \"Poland Central\" # Location of all resources. May be omitted\n      resourceGroup: \"rg_locreg\" # Resource group name. May be omitted\n      containerInstance: # Container instance configuration\n        name: \"weatherappcontainer\" # Container instance name. May be omitted\n        osType: \"Linux\" # Container instance OS type. May be omitted\n        restartPolicy: \"OnFailure\" # Container instance restart policy. May be omitted\n        ipAddress:\n          type: \"Public\" # Container instance IP address type. May be omitted\n          ports:\n            - port: 80 # Container instance port. May be omitted\n              protocol: \"TCP\" # Container instance protocol. May be omitted\n        resources:\n          requests: # Container instance resource requests. May be omitted\n            cpu: 1.0 # Container CPU. May be omitted\n            memory: 1.5 # Container memory. May be omitted\n</code></pre>"},{"location":"configuration/#container-instances-default-values","title":"Container Instances default values","text":"<p>By default, the deployment configuration is set to the following values:</p> <pre><code>deploy:\n  provider:\n    azure:\n      location: \"eastus\"\n      resourceGroup: \"LocregResourceGroup\"\n      containerInstance:\n        name: \"locreg-container\"\n        osType: \"Linux\"\n        restartPolicy: \"Always\"\n        ipAddress:\n          type: \"Public\"\n          ports:\n            - port: 80\n              protocol: \"TCP\"\n        resources:\n          requests:\n            cpu: 1.0\n            memory: 1.5\n</code></pre>"},{"location":"configuration/#deploy-configuration-aws","title":"Deploy configuration AWS","text":"<p>The deploy configuration section is used to store the settings for the AWS deployment provider. The deployment configuration consists of the following items:</p> <pre><code>deploy:\n  provider:\n    aws: # specify the provider name\n      ecs: # Amazon ECS service configuration\n      vpc: # VPC configuration\n\n</code></pre>"},{"location":"configuration/#deployment-for-amazon-ecs","title":"Deployment for Amazon ECS:","text":"<pre><code>\ndeploy:\n  provider:\n    aws: # Specify the provider name\n      region: \"us-east-1\" # AWS region where resources will be deployed. May be omitted\n      ecs: # ECS service configuration\n        clusterName: \"myClusterName\" # Name of the ECS cluster. May be omitted\n        serviceName: \"myServiceName\" # Name of the ECS service. Must be unique. May be omitted\n        serviceContainerCount: 1 # Number of containers to run. May be omitted\n        taskDefinition:\n          family: \"myTaskFamily\" # Name of the task family. May be omitted\n          awsRoleName: \"myRoleName\" # Name of the AWS role. May be omitted\n          memoryAllocation: 512 # Memory allocated for the task in MB. May be omitted\n          cpuAllocation: 256 # CPU units allocated for the task. May be omitted\n          containerDefinitions:\n            name: \"myContainerName\" # Name of the container. Must be unique. May be omitted\n            portMappings:\n              - containerPort: 80 # Port number on the container. May be omitted\n                hostPort: 80 # Port number on the host. May be omitted\n                protocol: \"tcp\" # Protocol used by the container. May be omitted\n      vpc: # VPC (Virtual Private Cloud) configuration\n        cidrBlock: \"10.0.0.0/16\" # CIDR block for the VPC. May be omitted\n        subnet:\n          cidrBlock: \"10.0.1.0/24\" # CIDR block for the subnet. May be omitted\n</code></pre>"},{"location":"configuration/#ecs-default-values","title":"ECS default values","text":"<p>By default, the deployment configuration is set to the following values:</p> <pre><code>deploy:\n  provider:\n    aws:\n      region: \"us-east-1\"\n      ecs:\n        clusterName: \"locreg-cluster\"\n        serviceName: \"locreg-service\"\n        serviceContainerCount: 1\n        taskDefinition:\n          family: \"locreg-task\"\n          memoryAllocation: 512\n          cpuAllocation: 256\n          containerDefinitions:\n            name: \"locreg-container\"\n            portMappings:\n              - containerPort: 80\n                hostPort: 80\n                protocol: \"tcp\"\n      vpc:\n        cidrBlock: \"10.10.0.0/16\"\n        subnet:\n          cidrBlock: \"10.10.10.0/24\"\n</code></pre>"},{"location":"configuration/#tags-configuration","title":"Tags configuration","text":"<p>Tags configuration part is used to store the tags that are used to tag cloud resources The tags configuration part consists of the following items:</p> <pre><code>tags:\n  managed-by: \"locreg\" # May be omitted\n</code></pre>"},{"location":"configuration/#multiple-tags","title":"Multiple tags","text":"<p>Also, you can specify multiple tags like this:</p> <pre><code>tags:\n  managed-by: \"locreg\"\n  environment: \"development\"\n  owner: \"John Doe\"\n  application: \"weather-app\"\n  version: \"1.0.0\"\n</code></pre>"},{"location":"configuration/#tags-turning-onoff","title":"Tags turning on/off","text":"<p>Tags part can be omitted, but if you do tag <code>managed-by: locreg</code> will be still added to all resources created by <code>locreg</code>. To disable tags, you can explicitly set <code>tags:</code> to <code>false</code> as shown bellow: Notice that it isn't recommended to disable tags because they allow easily identifying locreg-managed resources</p> <pre><code>tags: false\n</code></pre>"},{"location":"configuration/#configuration-file-for-env-variables","title":"Configuration file for env variables","text":"<p>To specify environment variables in the configuration file, you should use a .env file. The .env file should be placed in  the same folder as the configuration file or in the repo root. The .env file should contain the environment variables in the following format:</p> <pre><code>APP_NAME=MyApp\nAPP_ENV=development\nAPP_PORT=8080\nDATABASE_URL=postgres://user:password@localhost:5432/myappdb\n</code></pre> <p>And to apply it, you should use command <code>locreg deploy azure --env</code>, which deploys your app with the specified environment variables.</p>"},{"location":"configuration/#whats-next","title":"What's next?","text":"<ul> <li>Use getting started guide to see how to use <code>locreg</code> to deploy your app.</li> <li>Get familiar with <code>locreg</code> using locreg CLI guide.</li> </ul>"},{"location":"getting_started/","title":"Get Started","text":""},{"location":"getting_started/#setup","title":"Setup","text":"<p>Install <code>locreg</code> and Prerequisites</p> <p>To start using <code>locreg</code> you need to have: <code>locreg</code>, <code>docker</code> and corresponding cloud's CLI installed on your machine.</p>"},{"location":"getting_started/#import-your-tunnel-credentials","title":"Import your tunnel credentials","text":"<pre><code>export NGROK_AUTHTOKEN=your_ngrok_auth_token\n</code></pre>"},{"location":"getting_started/#then-authenticate-with-azure","title":"Then authenticate with Azure","text":"<pre><code>az login\n</code></pre>"},{"location":"getting_started/#then-authenticate-with-aws","title":"Then authenticate with AWS","text":"<pre><code>aws configure\n</code></pre>"},{"location":"getting_started/#copy-configuration-to-file-called-locregyaml-for-azure-app-service-deployment","title":"Copy configuration to file called <code>locreg.yaml</code> for Azure App Service deployment","text":"<pre><code>registry:\n  port: 8080\n  username: \"locreg\"\n\nimage:\n  name: \"sample-app\"\n  tag: \"latest\"\n\ntunnel:\n  provider:\n    ngrok:\n      name: my-locreg-test\n      port: 5050\n      networkName: ngrok-network\n\ndeploy:\n  provider:\n    azure:\n      location: \"East US\"\n      resourceGroup: \"LocregGettingStarted\"\n      appServicePlan:\n        sku:\n          name: \"F1\"\n          capacity: 1\n        planProperties:\n          reserved: true\n      appService:\n        siteConfig:\n          alwaysOn: false\n\ntags:\n  managed-by: \"locreg\"\n</code></pre> <p>This configuration creates a local registry, tunnel and deploys the image to the Azure App Service.</p>"},{"location":"getting_started/#copy-configuration-to-file-called-locregyaml-for-aws-ecs-deployment","title":"Copy configuration to file called <code>locreg.yaml</code> for AWS ECS deployment","text":"<pre><code>registry:\n  port: 8080\n  username: \"locreg\"\n\nimage:\n  name: \"sample-app\"\n  tag: \"latest\"\n\ntunnel:\n  provider:\n    ngrok:\n      name: my-locreg-test\n      port: 5050\n      networkName: ngrok-network\n\ndeploy:\n  provider:\n    aws:\n      region: \"us-east-1\"\n      ecs:\n        clusterName: \"locreg-cluster\"\n        serviceName: \"locreg-service\"\n        serviceContainerCount: 1\n        taskDefinition:\n          family: \"locreg-task\"\n          memoryAllocation: 512\n          cpuAllocation: 256\n          containerDefinitions:\n            - name: \"locreg-container\"\n              portMappings:\n                - containerPort: 80\n                  hostPort: 80\n                  protocol: \"tcp\"\n      vpc:\n        cidrBlock: \"10.10.0.0/16\"\n        subnet:\n          cidrBlock: \"10.10.10.0/24\"\n\ntags:\n  managed-by: \"locreg\"\n</code></pre> <p>This configuration creates a local registry, tunnel and deploys the image to the AWS ECS.</p>"},{"location":"getting_started/#create-a-sample-dockerfile","title":"Create a sample Dockerfile","text":"<pre><code>FROM nginx:alpine\nRUN echo \"Hello from locreg\" &gt; /usr/share/nginx/html/index.html\n</code></pre>"},{"location":"getting_started/#create-registry-then-build-and-push-the-image-to-the-registry-and-deploy-to-azure","title":"Create registry, then build and push the image to the registry and deploy to Azure","text":"<pre><code>locreg registry\nlocreg push\nlocreg deploy azure\n</code></pre> <p>After you can go to the Azure portal and see the deployed app service.</p>"},{"location":"getting_started/#create-registry-then-build-and-push-the-image-to-the-registry-and-deploy-to-aws","title":"Create registry, then build and push the image to the registry and deploy to AWS","text":"<pre><code>locreg registry\nlocreg push\nlocreg deploy aws\n</code></pre> <p>After you can go to the AWS console and see the deployed ECS service.</p>"},{"location":"getting_started/#whats-next","title":"What's next?","text":"<ul> <li>Use getting started guide to see how to use <code>locreg</code> to deploy your app.</li> <li>Get familiar with <code>locreg</code> using locreg CLI guide.</li> </ul>"},{"location":"install/","title":"Installation","text":"<p>Currently supported platforms include only Linux amd64. We're planning to add macOS ARM and Linux ARM support soon. You may also install and use it on Windows machine, but first you would need to install WSL. There are several ways to install locreg:</p>"},{"location":"install/#change-to-public-repo","title":"Change to public repo","text":""},{"location":"install/#using-the-go-install-command","title":"Using the go install command","text":"<pre><code>go install github.com/Uitware/locreg@latest  \n</code></pre>"},{"location":"install/#using-a-bash-script","title":"Using a bash script","text":"<pre><code>curl -OL https://github.com/Uitware/locreg/releases/latest/download/locreg.tar.gz\ntar -zxvf locreg.tar.gz\nchmod +x locreg\nmv locreg /usr/local/bin/locreg\n\n# to clean resources: \nrm locreg.tar.gz\n</code></pre>"},{"location":"install/#prerequisites","title":"Prerequisites","text":""},{"location":"install/#docker","title":"docker","text":"<p>You should also have docker installed on your machine. If you don't have a docker installed, you can install it by  following the instructions here.</p>"},{"location":"install/#azure-cli","title":"Azure CLI","text":"<p>If you are planning to deploy your images to Azure, you should also have Azure CLI installed on your machine.  You can install it by following the instructions here.</p>"},{"location":"install/#whats-next","title":"What's next?","text":"<ul> <li>Get familiar with <code>locreg</code> configuration options</li> <li>Get familiar with locreg to see how to use the <code>locreg</code> command line interface.</li> <li>Get started with getting started guide to see how to use <code>locreg</code> to deploy your app.</li> </ul>"},{"location":"cli/locreg/","title":"locreg","text":""},{"location":"cli/locreg/#locreg","title":"locreg","text":"<p><code>locreg [command] [options]</code> is the main command used to interact with <code>locreg</code>.</p>"},{"location":"cli/locreg/#commands","title":"Commands","text":"<ul> <li>locreg registry - Create local registry.</li> <li>locreg destroy - Destroy all resources managed by locreg.</li> <li>locreg tunnel - Create a tunnel to expose the local registry to the Internet.</li> <li>locreg deploy - Deploy cloud infrastructure resources for your app.</li> <li>locreg push - Build and push the image to the local registry.</li> </ul>"},{"location":"cli/locreg/#options","title":"Options","text":"<pre><code>    -h, --help    help for locreg\n    -v, --version version for locreg // Will be added soon\n</code></pre>"},{"location":"cli/locreg_deploy/","title":"locreg deploy","text":""},{"location":"cli/locreg_deploy/#locreg-deploy","title":"locreg deploy","text":"<p><code>locreg deploy [provider]</code> command is used to deploy the infrastructure needed by your app into the cloud.</p>"},{"location":"cli/locreg_deploy/#providers","title":"Providers:","text":"<ul> <li><code>locreg deploy azure</code> - Azure Container Instances and Azure App Service container platforms are currently supported.</li> <li><code>locreg deploy aws</code> -  AWS ECS platform is currently supported</li> <li>GCP container platforms coming soon</li> </ul>"},{"location":"cli/locreg_deploy/#options","title":"Options","text":"<pre><code>    -h, --help         help for push\n    --env [path]       Path to the environment file.\n</code></pre>"},{"location":"cli/locreg_destroy/","title":"locreg destroy","text":""},{"location":"cli/locreg_destroy/#locreg-destroy","title":"locreg destroy","text":"<p><code>locreg destroy [options]</code> command is used to destroy the resources created by locreg.</p>"},{"location":"cli/locreg_destroy/#usage","title":"Usage:","text":"<pre><code>locreg destroy [option]\n</code></pre> <p>Destroy all the resources created by locreg and managed in <code>~/.locreg</code> profile file. If the <code>~/.locreg</code> profile file corrupted, resources won't be deleted.</p>"},{"location":"cli/locreg_destroy/#options","title":"Options:","text":"<pre><code>    -h, --help    help for destroy\n    registry      Destroys the local container registry.\n    tunnel        Destroys the public access tunnel.\n    cloud         Destroys cloud resources (e.g., serverless instances).\n    all           Destroys all resources, including registry, tunnel, and cloud resources.\n</code></pre>"},{"location":"cli/locreg_push/","title":"locreg push","text":""},{"location":"cli/locreg_push/#locreg-push","title":"locreg push","text":"<p><code>locreg push [location] [options]</code> is used to build and push the image to the local registry.</p>"},{"location":"cli/locreg_push/#location","title":"Location","text":"<p>The directory where the Dockerfile is located. Must be specified and should be a valid path.</p> <pre><code>locreg push /path/to/Dockerfile\nlocreg push . # to build in the current directory\n</code></pre>"},{"location":"cli/locreg_push/#options","title":"Options","text":"<pre><code>    -h, --help         help for push\n    -t, --tag string   Tag of the image to be pushed. (defaults to \"latest\")\n</code></pre>"},{"location":"cli/locreg_registry/","title":"locreg registry","text":""},{"location":"cli/locreg_registry/#locreg-registry","title":"locreg registry","text":"<p><code>locreg registry [command] [options]</code> command is used to create a local registry and a tunnel to expose it to the public Internet. Values for registry and tunnel are taken from the <code>locreg.yaml</code> configuration file.</p>"},{"location":"cli/locreg_registry/#commands","title":"Commands:","text":"<ul> <li><code>locreg registry rotate</code> - Rotate the password of the registry.</li> <li><code>locreg registry only-registry</code> - Create only the local registry, without exposing to the public Internet. #TODO in the next release</li> </ul>"},{"location":"cli/locreg_registry/#options","title":"Options:","text":"<pre><code>    -h, --help    help for registry\n</code></pre>"},{"location":"cli/locreg_tunnel/","title":"locreg tunnel","text":""},{"location":"cli/locreg_tunnel/#locreg-tunnel","title":"locreg tunnel","text":"<p><code>locreg tunnel [options]</code> command is used to create a tunnel to expose the local registry to the public Internet. Values for a tunnel are taken from the configuration file.</p>"},{"location":"cli/locreg_tunnel/#options","title":"Options","text":"<pre><code>    -h, --help    help for tunnel\n</code></pre>"}]}